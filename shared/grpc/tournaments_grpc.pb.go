// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpc/tournaments.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TournamentService_CreateTournament_FullMethodName = "/tournament.TournamentService/CreateTournament"
	TournamentService_ReplicateCreate_FullMethodName  = "/tournament.TournamentService/ReplicateCreate"
	TournamentService_GetTournament_FullMethodName    = "/tournament.TournamentService/GetTournament"
	TournamentService_ListTournaments_FullMethodName  = "/tournament.TournamentService/ListTournaments"
	TournamentService_UpdateTournament_FullMethodName = "/tournament.TournamentService/UpdateTournament"
)

// TournamentServiceClient is the client API for TournamentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TournamentService defines the gRPC service for tournament operations
type TournamentServiceClient interface {
	// CreateTournament creates a new tournament
	CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error)
	ReplicateCreate(ctx context.Context, in *ReplicateCreateRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error)
	// GetTournament retrieves a tournament by ID
	GetTournament(ctx context.Context, in *GetTournamentRequest, opts ...grpc.CallOption) (*GetTournamentResponse, error)
	// ListTournaments retrieves a list of tournaments with optional filtering
	ListTournaments(ctx context.Context, in *ListTournamentsRequest, opts ...grpc.CallOption) (*ListTournamentsResponse, error)
	UpdateTournament(ctx context.Context, in *UpdateTournamentRequest, opts ...grpc.CallOption) (*UpdateTournamentResponse, error)
}

type tournamentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentServiceClient(cc grpc.ClientConnInterface) TournamentServiceClient {
	return &tournamentServiceClient{cc}
}

func (c *tournamentServiceClient) CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_CreateTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) ReplicateCreate(ctx context.Context, in *ReplicateCreateRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_ReplicateCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournament(ctx context.Context, in *GetTournamentRequest, opts ...grpc.CallOption) (*GetTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_GetTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) ListTournaments(ctx context.Context, in *ListTournamentsRequest, opts ...grpc.CallOption) (*ListTournamentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTournamentsResponse)
	err := c.cc.Invoke(ctx, TournamentService_ListTournaments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) UpdateTournament(ctx context.Context, in *UpdateTournamentRequest, opts ...grpc.CallOption) (*UpdateTournamentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTournamentResponse)
	err := c.cc.Invoke(ctx, TournamentService_UpdateTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TournamentServiceServer is the server API for TournamentService service.
// All implementations must embed UnimplementedTournamentServiceServer
// for forward compatibility.
//
// TournamentService defines the gRPC service for tournament operations
type TournamentServiceServer interface {
	// CreateTournament creates a new tournament
	CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error)
	ReplicateCreate(context.Context, *ReplicateCreateRequest) (*CreateTournamentResponse, error)
	// GetTournament retrieves a tournament by ID
	GetTournament(context.Context, *GetTournamentRequest) (*GetTournamentResponse, error)
	// ListTournaments retrieves a list of tournaments with optional filtering
	ListTournaments(context.Context, *ListTournamentsRequest) (*ListTournamentsResponse, error)
	UpdateTournament(context.Context, *UpdateTournamentRequest) (*UpdateTournamentResponse, error)
	mustEmbedUnimplementedTournamentServiceServer()
}

// UnimplementedTournamentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTournamentServiceServer struct{}

func (UnimplementedTournamentServiceServer) CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTournament not implemented")
}
func (UnimplementedTournamentServiceServer) ReplicateCreate(context.Context, *ReplicateCreateRequest) (*CreateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateCreate not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournament(context.Context, *GetTournamentRequest) (*GetTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournament not implemented")
}
func (UnimplementedTournamentServiceServer) ListTournaments(context.Context, *ListTournamentsRequest) (*ListTournamentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTournaments not implemented")
}
func (UnimplementedTournamentServiceServer) UpdateTournament(context.Context, *UpdateTournamentRequest) (*UpdateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTournament not implemented")
}
func (UnimplementedTournamentServiceServer) mustEmbedUnimplementedTournamentServiceServer() {}
func (UnimplementedTournamentServiceServer) testEmbeddedByValue()                           {}

// UnsafeTournamentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentServiceServer will
// result in compilation errors.
type UnsafeTournamentServiceServer interface {
	mustEmbedUnimplementedTournamentServiceServer()
}

func RegisterTournamentServiceServer(s grpc.ServiceRegistrar, srv TournamentServiceServer) {
	// If the following call pancis, it indicates UnimplementedTournamentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TournamentService_ServiceDesc, srv)
}

func _TournamentService_CreateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).CreateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_CreateTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).CreateTournament(ctx, req.(*CreateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_ReplicateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).ReplicateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_ReplicateCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).ReplicateCreate(ctx, req.(*ReplicateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournament(ctx, req.(*GetTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_ListTournaments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTournamentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).ListTournaments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_ListTournaments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).ListTournaments(ctx, req.(*ListTournamentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_UpdateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).UpdateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_UpdateTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).UpdateTournament(ctx, req.(*UpdateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TournamentService_ServiceDesc is the grpc.ServiceDesc for TournamentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TournamentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tournament.TournamentService",
	HandlerType: (*TournamentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTournament",
			Handler:    _TournamentService_CreateTournament_Handler,
		},
		{
			MethodName: "ReplicateCreate",
			Handler:    _TournamentService_ReplicateCreate_Handler,
		},
		{
			MethodName: "GetTournament",
			Handler:    _TournamentService_GetTournament_Handler,
		},
		{
			MethodName: "ListTournaments",
			Handler:    _TournamentService_ListTournaments_Handler,
		},
		{
			MethodName: "UpdateTournament",
			Handler:    _TournamentService_UpdateTournament_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/tournaments.proto",
}
